/*
Package exampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

NOTE WELL: This is an example code file that is distributed with ygot.
It should not be used within your application, as it WILL change,
without warning. Rather, you should generate structs directly from
OpenConfig models using the ygot package.

This package was generated by github.com/openconfig/ygot
using the following YANG input files:
	- public/release/models/catalog/openconfig-module-catalog.yang
Imported modules were sourced from:
	- public/...
	- deps/...
*/
package ygotgen

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       nil,
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// OpenconfigModuleCatalog_Organizations represents the /openconfig-module-catalog/organizations YANG schema element.
type OpenconfigModuleCatalog_Organizations struct {
	Organization map[string]*OpenconfigModuleCatalog_Organizations_Organization `path:"organization" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations) IsYANGGoStruct() {}

// NewOrganization creates a new entry in the Organization list of the
// OpenconfigModuleCatalog_Organizations struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations) NewOrganization(Name string) (*OpenconfigModuleCatalog_Organizations_Organization, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Organization == nil {
		t.Organization = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Organization[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Organization", key)
	}

	t.Organization[key] = &OpenconfigModuleCatalog_Organizations_Organization{
		Name: &Name,
	}

	return t.Organization[key], nil
}

// RenameOrganization renames an entry in the list Organization within
// the OpenconfigModuleCatalog_Organizations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations) RenameOrganization(oldK, newK string) error {
	if _, ok := t.Organization[newK]; ok {
		return fmt.Errorf("key %v already exists in Organization", newK)
	}

	e, ok := t.Organization[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Organization", oldK)
	}
	e.Name = &newK

	t.Organization[newK] = e
	delete(t.Organization, oldK)
	return nil
}

// GetOrCreateOrganization retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations) GetOrCreateOrganization(Name string) *OpenconfigModuleCatalog_Organizations_Organization {

	key := Name

	if v, ok := t.Organization[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOrganization(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOrganization got unexpected error: %v", err))
	}
	return v
}

// GetOrganization retrieves the value with the specified key from
// the Organization map field of OpenconfigModuleCatalog_Organizations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations) GetOrganization(Name string) *OpenconfigModuleCatalog_Organizations_Organization {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Organization[key]; ok {
		return lm
	}
	return nil
}

// AppendOrganization appends the supplied OpenconfigModuleCatalog_Organizations_Organization struct to the
// list Organization of OpenconfigModuleCatalog_Organizations. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations) AppendOrganization(v *OpenconfigModuleCatalog_Organizations_Organization) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Organization == nil {
		t.Organization = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization)
	}

	if _, ok := t.Organization[key]; ok {
		return fmt.Errorf("duplicate key for list Organization %v", key)
	}

	t.Organization[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization represents the /openconfig-module-catalog/organizations/organization YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization struct {
	Contact         *string                                                             `path:"contact" module:"openconfig-module-catalog"`
	FeatureBundles  *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles  `path:"feature-bundles" module:"openconfig-module-catalog"`
	Implementations *OpenconfigModuleCatalog_Organizations_Organization_Implementations `path:"implementations" module:"openconfig-module-catalog"`
	Modules         *OpenconfigModuleCatalog_Organizations_Organization_Modules         `path:"modules" module:"openconfig-module-catalog"`
	Name            *string                                                             `path:"name" module:"openconfig-module-catalog"`
	ReleaseBundles  *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles  `path:"release-bundles" module:"openconfig-module-catalog"`
	Type            E_OpenconfigCatalogTypes_ORGANIZATION_TYPE                          `path:"type" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization) IsYANGGoStruct() {}

// GetOrCreateFeatureBundles retrieves the value of the FeatureBundles field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetOrCreateFeatureBundles() *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles {
	if t.FeatureBundles != nil {
		return t.FeatureBundles
	}
	t.FeatureBundles = &OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles{}
	return t.FeatureBundles
}

// GetOrCreateImplementations retrieves the value of the Implementations field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetOrCreateImplementations() *OpenconfigModuleCatalog_Organizations_Organization_Implementations {
	if t.Implementations != nil {
		return t.Implementations
	}
	t.Implementations = &OpenconfigModuleCatalog_Organizations_Organization_Implementations{}
	return t.Implementations
}

// GetOrCreateModules retrieves the value of the Modules field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetOrCreateModules() *OpenconfigModuleCatalog_Organizations_Organization_Modules {
	if t.Modules != nil {
		return t.Modules
	}
	t.Modules = &OpenconfigModuleCatalog_Organizations_Organization_Modules{}
	return t.Modules
}

// GetOrCreateReleaseBundles retrieves the value of the ReleaseBundles field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetOrCreateReleaseBundles() *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles {
	if t.ReleaseBundles != nil {
		return t.ReleaseBundles
	}
	t.ReleaseBundles = &OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles{}
	return t.ReleaseBundles
}

// GetFeatureBundles returns the value of the FeatureBundles struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization. If the receiver or the field FeatureBundles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetFeatureBundles() *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles {
	if t != nil && t.FeatureBundles != nil {
		return t.FeatureBundles
	}
	return nil
}

// GetImplementations returns the value of the Implementations struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization. If the receiver or the field Implementations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetImplementations() *OpenconfigModuleCatalog_Organizations_Organization_Implementations {
	if t != nil && t.Implementations != nil {
		return t.Implementations
	}
	return nil
}

// GetModules returns the value of the Modules struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization. If the receiver or the field Modules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetModules() *OpenconfigModuleCatalog_Organizations_Organization_Modules {
	if t != nil && t.Modules != nil {
		return t.Modules
	}
	return nil
}

// GetReleaseBundles returns the value of the ReleaseBundles struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization. If the receiver or the field ReleaseBundles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetReleaseBundles() *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles {
	if t != nil && t.ReleaseBundles != nil {
		return t.ReleaseBundles
	}
	return nil
}

// GetContact retrieves the value of the leaf Contact from the OpenconfigModuleCatalog_Organizations_Organization
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Contact is set, it can safely use t.GetContact()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Contact == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetContact() string {
	if t == nil || t.Contact == nil {
		return ""
	}
	return *t.Contact
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the OpenconfigModuleCatalog_Organizations_Organization
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization) GetType() E_OpenconfigCatalogTypes_ORGANIZATION_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles represents the /openconfig-module-catalog/organizations/organization/feature-bundles YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles struct {
	FeatureBundle map[OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle `path:"feature-bundle" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) IsYANGGoStruct() {}

// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key represents the key for list FeatureBundle of element /openconfig-module-catalog/organizations/organization/feature-bundles.
type OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key struct {
	Name    string `path:"name"`
	Version string `path:"version"`
}

// NewFeatureBundle creates a new entry in the FeatureBundle list of the
// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) NewFeatureBundle(Name string, Version string) (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FeatureBundle == nil {
		t.FeatureBundle = make(map[OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle)
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key{
		Name:    Name,
		Version: Version,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FeatureBundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FeatureBundle", key)
	}

	t.FeatureBundle[key] = &OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle{
		Name:    &Name,
		Version: &Version,
	}

	return t.FeatureBundle[key], nil
}

// RenameFeatureBundle renames an entry in the list FeatureBundle within
// the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) RenameFeatureBundle(oldK, newK OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key) error {
	if _, ok := t.FeatureBundle[newK]; ok {
		return fmt.Errorf("key %v already exists in FeatureBundle", newK)
	}

	e, ok := t.FeatureBundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FeatureBundle", oldK)
	}
	e.Name = &newK.Name
	e.Version = &newK.Version

	t.FeatureBundle[newK] = e
	delete(t.FeatureBundle, oldK)
	return nil
}

// GetOrCreateFeatureBundle retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) GetOrCreateFeatureBundle(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle {

	key := OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key{
		Name:    Name,
		Version: Version,
	}

	if v, ok := t.FeatureBundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFeatureBundle(Name, Version)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFeatureBundle got unexpected error: %v", err))
	}
	return v
}

// GetFeatureBundle retrieves the value with the specified key from
// the FeatureBundle map field of OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) GetFeatureBundle(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle {

	if t == nil {
		return nil
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key{
		Name:    Name,
		Version: Version,
	}

	if lm, ok := t.FeatureBundle[key]; ok {
		return lm
	}
	return nil
}

// AppendFeatureBundle appends the supplied OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle struct to the
// list FeatureBundle of OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) AppendFeatureBundle(v *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	if v.Version == nil {
		return fmt.Errorf("invalid nil key for Version")
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key{
		Name:    *v.Name,
		Version: *v.Version,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FeatureBundle == nil {
		t.FeatureBundle = make(map[OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle)
	}

	if _, ok := t.FeatureBundle[key]; ok {
		return fmt.Errorf("duplicate key for list FeatureBundle %v", key)
	}

	t.FeatureBundle[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle represents the /openconfig-module-catalog/organizations/organization/feature-bundles/feature-bundle YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle struct {
	FeatureBundles *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles `path:"feature-bundles" module:"openconfig-module-catalog"`
	Name           *string                                                                                         `path:"name" module:"openconfig-module-catalog"`
	Path           []string                                                                                        `path:"path" module:"openconfig-module-catalog"`
	ReleaseBundle  *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle  `path:"release-bundle" module:"openconfig-module-catalog"`
	Version        *string                                                                                         `path:"version" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) IsYANGGoStruct() {
}

// GetOrCreateFeatureBundles retrieves the value of the FeatureBundles field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetOrCreateFeatureBundles() *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles {
	if t.FeatureBundles != nil {
		return t.FeatureBundles
	}
	t.FeatureBundles = &OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles{}
	return t.FeatureBundles
}

// GetOrCreateReleaseBundle retrieves the value of the ReleaseBundle field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetOrCreateReleaseBundle() *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle {
	if t.ReleaseBundle != nil {
		return t.ReleaseBundle
	}
	t.ReleaseBundle = &OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle{}
	return t.ReleaseBundle
}

// GetFeatureBundles returns the value of the FeatureBundles struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle. If the receiver or the field FeatureBundles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetFeatureBundles() *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles {
	if t != nil && t.FeatureBundles != nil {
		return t.FeatureBundles
	}
	return nil
}

// GetReleaseBundle returns the value of the ReleaseBundle struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle. If the receiver or the field ReleaseBundle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetReleaseBundle() *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle {
	if t != nil && t.ReleaseBundle != nil {
		return t.ReleaseBundle
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPath retrieves the value of the leaf Path from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Path is set, it can safely use t.GetPath()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Path == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetPath() []string {
	if t == nil || t.Path == nil {
		return nil
	}
	return t.Path
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Version == nil {
		return nil, fmt.Errorf("nil value for key Version")
	}

	return map[string]interface{}{
		"name":    *t.Name,
		"version": *t.Version,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles represents the /openconfig-module-catalog/organizations/organization/feature-bundles/feature-bundle/feature-bundles YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles struct {
	FeatureBundle map[string]*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle `path:"feature-bundle" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) IsYANGGoStruct() {
}

// NewFeatureBundle creates a new entry in the FeatureBundle list of the
// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) NewFeatureBundle(Name string) (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FeatureBundle == nil {
		t.FeatureBundle = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FeatureBundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FeatureBundle", key)
	}

	t.FeatureBundle[key] = &OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle{
		Name: &Name,
	}

	return t.FeatureBundle[key], nil
}

// RenameFeatureBundle renames an entry in the list FeatureBundle within
// the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) RenameFeatureBundle(oldK, newK string) error {
	if _, ok := t.FeatureBundle[newK]; ok {
		return fmt.Errorf("key %v already exists in FeatureBundle", newK)
	}

	e, ok := t.FeatureBundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FeatureBundle", oldK)
	}
	e.Name = &newK

	t.FeatureBundle[newK] = e
	delete(t.FeatureBundle, oldK)
	return nil
}

// GetOrCreateFeatureBundle retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) GetOrCreateFeatureBundle(Name string) *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle {

	key := Name

	if v, ok := t.FeatureBundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFeatureBundle(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFeatureBundle got unexpected error: %v", err))
	}
	return v
}

// GetFeatureBundle retrieves the value with the specified key from
// the FeatureBundle map field of OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) GetFeatureBundle(Name string) *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.FeatureBundle[key]; ok {
		return lm
	}
	return nil
}

// AppendFeatureBundle appends the supplied OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle struct to the
// list FeatureBundle of OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) AppendFeatureBundle(v *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FeatureBundle == nil {
		t.FeatureBundle = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle)
	}

	if _, ok := t.FeatureBundle[key]; ok {
		return fmt.Errorf("duplicate key for list FeatureBundle %v", key)
	}

	t.FeatureBundle[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle represents the /openconfig-module-catalog/organizations/organization/feature-bundles/feature-bundle/feature-bundles/feature-bundle YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle struct {
	Name      *string `path:"name" module:"openconfig-module-catalog"`
	Publisher *string `path:"publisher" module:"openconfig-module-catalog"`
	Version   *string `path:"version" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPublisher retrieves the value of the leaf Publisher from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Publisher is set, it can safely use t.GetPublisher()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Publisher == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) GetPublisher() string {
	if t == nil || t.Publisher == nil {
		return ""
	}
	return *t.Publisher
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_FeatureBundles_FeatureBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle represents the /openconfig-module-catalog/organizations/organization/feature-bundles/feature-bundle/release-bundle YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle struct {
	Name      *string `path:"name" module:"openconfig-module-catalog"`
	Publisher *string `path:"publisher" module:"openconfig-module-catalog"`
	Version   *string `path:"version" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPublisher retrieves the value of the leaf Publisher from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Publisher is set, it can safely use t.GetPublisher()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Publisher == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) GetPublisher() string {
	if t == nil || t.Publisher == nil {
		return ""
	}
	return *t.Publisher
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_FeatureBundles_FeatureBundle_ReleaseBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Implementations represents the /openconfig-module-catalog/organizations/organization/implementations YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Implementations struct {
	Implementation map[string]*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation `path:"implementation" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Implementations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Implementations) IsYANGGoStruct() {}

// NewImplementation creates a new entry in the Implementation list of the
// OpenconfigModuleCatalog_Organizations_Organization_Implementations struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) NewImplementation(Id string) (*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Implementation == nil {
		t.Implementation = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Implementation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Implementation", key)
	}

	t.Implementation[key] = &OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation{
		Id: &Id,
	}

	return t.Implementation[key], nil
}

// RenameImplementation renames an entry in the list Implementation within
// the OpenconfigModuleCatalog_Organizations_Organization_Implementations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) RenameImplementation(oldK, newK string) error {
	if _, ok := t.Implementation[newK]; ok {
		return fmt.Errorf("key %v already exists in Implementation", newK)
	}

	e, ok := t.Implementation[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Implementation", oldK)
	}
	e.Id = &newK

	t.Implementation[newK] = e
	delete(t.Implementation, oldK)
	return nil
}

// GetOrCreateImplementation retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_Implementations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) GetOrCreateImplementation(Id string) *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation {

	key := Id

	if v, ok := t.Implementation[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewImplementation(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateImplementation got unexpected error: %v", err))
	}
	return v
}

// GetImplementation retrieves the value with the specified key from
// the Implementation map field of OpenconfigModuleCatalog_Organizations_Organization_Implementations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) GetImplementation(Id string) *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Implementation[key]; ok {
		return lm
	}
	return nil
}

// AppendImplementation appends the supplied OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation struct to the
// list Implementation of OpenconfigModuleCatalog_Organizations_Organization_Implementations. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) AppendImplementation(v *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Implementation == nil {
		t.Implementation = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation)
	}

	if _, ok := t.Implementation[key]; ok {
		return fmt.Errorf("duplicate key for list Implementation %v", key)
	}

	t.Implementation[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Implementations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation represents the /openconfig-module-catalog/organizations/organization/implementations/implementation YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation struct {
	Description     *string                                                                                           `path:"description" module:"openconfig-module-catalog"`
	FeatureBundles  *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles `path:"feature-bundles" module:"openconfig-module-catalog"`
	Id              *string                                                                                           `path:"id" module:"openconfig-module-catalog"`
	Platform        *string                                                                                           `path:"platform" module:"openconfig-module-catalog"`
	PlatformVersion *string                                                                                           `path:"platform-version" module:"openconfig-module-catalog"`
	Reference       *string                                                                                           `path:"reference" module:"openconfig-module-catalog"`
	Status          E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE                                               `path:"status" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) IsYANGGoStruct() {
}

// GetOrCreateFeatureBundles retrieves the value of the FeatureBundles field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetOrCreateFeatureBundles() *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles {
	if t.FeatureBundles != nil {
		return t.FeatureBundles
	}
	t.FeatureBundles = &OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles{}
	return t.FeatureBundles
}

// GetFeatureBundles returns the value of the FeatureBundles struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation. If the receiver or the field FeatureBundles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetFeatureBundles() *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles {
	if t != nil && t.FeatureBundles != nil {
		return t.FeatureBundles
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetPlatform retrieves the value of the leaf Platform from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Platform is set, it can safely use t.GetPlatform()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Platform == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetPlatform() string {
	if t == nil || t.Platform == nil {
		return ""
	}
	return *t.Platform
}

// GetPlatformVersion retrieves the value of the leaf PlatformVersion from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PlatformVersion is set, it can safely use t.GetPlatformVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PlatformVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetPlatformVersion() string {
	if t == nil || t.PlatformVersion == nil {
		return ""
	}
	return *t.PlatformVersion
}

// GetReference retrieves the value of the leaf Reference from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Reference is set, it can safely use t.GetReference()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Reference == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetReference() string {
	if t == nil || t.Reference == nil {
		return ""
	}
	return *t.Reference
}

// GetStatus retrieves the value of the leaf Status from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Status is set, it can safely use t.GetStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Status == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) GetStatus() E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles represents the /openconfig-module-catalog/organizations/organization/implementations/implementation/feature-bundles YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles struct {
	FeatureBundle map[OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle `path:"feature-bundle" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) IsYANGGoStruct() {
}

// OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key represents the key for list FeatureBundle of element /openconfig-module-catalog/organizations/organization/implementations/implementation/feature-bundles.
type OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key struct {
	Name    string `path:"name"`
	Version string `path:"version"`
}

// NewFeatureBundle creates a new entry in the FeatureBundle list of the
// OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) NewFeatureBundle(Name string, Version string) (*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FeatureBundle == nil {
		t.FeatureBundle = make(map[OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle)
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key{
		Name:    Name,
		Version: Version,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FeatureBundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FeatureBundle", key)
	}

	t.FeatureBundle[key] = &OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle{
		Name:    &Name,
		Version: &Version,
	}

	return t.FeatureBundle[key], nil
}

// RenameFeatureBundle renames an entry in the list FeatureBundle within
// the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) RenameFeatureBundle(oldK, newK OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key) error {
	if _, ok := t.FeatureBundle[newK]; ok {
		return fmt.Errorf("key %v already exists in FeatureBundle", newK)
	}

	e, ok := t.FeatureBundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FeatureBundle", oldK)
	}
	e.Name = &newK.Name
	e.Version = &newK.Version

	t.FeatureBundle[newK] = e
	delete(t.FeatureBundle, oldK)
	return nil
}

// GetOrCreateFeatureBundle retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) GetOrCreateFeatureBundle(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle {

	key := OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key{
		Name:    Name,
		Version: Version,
	}

	if v, ok := t.FeatureBundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFeatureBundle(Name, Version)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFeatureBundle got unexpected error: %v", err))
	}
	return v
}

// GetFeatureBundle retrieves the value with the specified key from
// the FeatureBundle map field of OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) GetFeatureBundle(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle {

	if t == nil {
		return nil
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key{
		Name:    Name,
		Version: Version,
	}

	if lm, ok := t.FeatureBundle[key]; ok {
		return lm
	}
	return nil
}

// AppendFeatureBundle appends the supplied OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle struct to the
// list FeatureBundle of OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) AppendFeatureBundle(v *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	if v.Version == nil {
		return fmt.Errorf("invalid nil key for Version")
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key{
		Name:    *v.Name,
		Version: *v.Version,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FeatureBundle == nil {
		t.FeatureBundle = make(map[OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle)
	}

	if _, ok := t.FeatureBundle[key]; ok {
		return fmt.Errorf("duplicate key for list FeatureBundle %v", key)
	}

	t.FeatureBundle[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle represents the /openconfig-module-catalog/organizations/organization/implementations/implementation/feature-bundles/feature-bundle YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle struct {
	Name      *string `path:"name" module:"openconfig-module-catalog"`
	Publisher *string `path:"publisher" module:"openconfig-module-catalog"`
	Version   *string `path:"version" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPublisher retrieves the value of the leaf Publisher from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Publisher is set, it can safely use t.GetPublisher()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Publisher == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) GetPublisher() string {
	if t == nil || t.Publisher == nil {
		return ""
	}
	return *t.Publisher
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Version == nil {
		return nil, fmt.Errorf("nil value for key Version")
	}

	return map[string]interface{}{
		"name":    *t.Name,
		"version": *t.Version,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Implementations_Implementation_FeatureBundles_FeatureBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules represents the /openconfig-module-catalog/organizations/organization/modules YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules struct {
	Module map[OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key]*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module `path:"module" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules) IsYANGGoStruct() {}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key represents the key for list Module of element /openconfig-module-catalog/organizations/organization/modules.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key struct {
	Name    string `path:"name"`
	Version string `path:"version"`
}

// NewModule creates a new entry in the Module list of the
// OpenconfigModuleCatalog_Organizations_Organization_Modules struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) NewModule(Name string, Version string) (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Module == nil {
		t.Module = make(map[OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key]*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module)
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key{
		Name:    Name,
		Version: Version,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Module[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Module", key)
	}

	t.Module[key] = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module{
		Name:    &Name,
		Version: &Version,
	}

	return t.Module[key], nil
}

// RenameModule renames an entry in the list Module within
// the OpenconfigModuleCatalog_Organizations_Organization_Modules struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) RenameModule(oldK, newK OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key) error {
	if _, ok := t.Module[newK]; ok {
		return fmt.Errorf("key %v already exists in Module", newK)
	}

	e, ok := t.Module[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Module", oldK)
	}
	e.Name = &newK.Name
	e.Version = &newK.Version

	t.Module[newK] = e
	delete(t.Module, oldK)
	return nil
}

// GetOrCreateModule retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_Modules. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) GetOrCreateModule(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module {

	key := OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key{
		Name:    Name,
		Version: Version,
	}

	if v, ok := t.Module[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewModule(Name, Version)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateModule got unexpected error: %v", err))
	}
	return v
}

// GetModule retrieves the value with the specified key from
// the Module map field of OpenconfigModuleCatalog_Organizations_Organization_Modules. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) GetModule(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module {

	if t == nil {
		return nil
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key{
		Name:    Name,
		Version: Version,
	}

	if lm, ok := t.Module[key]; ok {
		return lm
	}
	return nil
}

// AppendModule appends the supplied OpenconfigModuleCatalog_Organizations_Organization_Modules_Module struct to the
// list Module of OpenconfigModuleCatalog_Organizations_Organization_Modules. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_Modules_Module already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) AppendModule(v *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	if v.Version == nil {
		return fmt.Errorf("invalid nil key for Version")
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key{
		Name:    *v.Name,
		Version: *v.Version,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Module == nil {
		t.Module = make(map[OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Key]*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module)
	}

	if _, ok := t.Module[key]; ok {
		return fmt.Errorf("duplicate key for list Module %v", key)
	}

	t.Module[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module represents the /openconfig-module-catalog/organizations/organization/modules/module YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module struct {
	Access         *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access         `path:"access" module:"openconfig-module-catalog"`
	Classification *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification `path:"classification" module:"openconfig-module-catalog"`
	Dependencies   *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies   `path:"dependencies" module:"openconfig-module-catalog"`
	Name           *string                                                                           `path:"name" module:"openconfig-module-catalog"`
	Namespace      *string                                                                           `path:"namespace" module:"openconfig-module-catalog"`
	Prefix         *string                                                                           `path:"prefix" module:"openconfig-module-catalog"`
	Revision       *string                                                                           `path:"revision" module:"openconfig-module-catalog"`
	Submodules     *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules     `path:"submodules" module:"openconfig-module-catalog"`
	Summary        *string                                                                           `path:"summary" module:"openconfig-module-catalog"`
	Version        *string                                                                           `path:"version" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetOrCreateAccess() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access{}
	return t.Access
}

// GetOrCreateClassification retrieves the value of the Classification field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetOrCreateClassification() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification {
	if t.Classification != nil {
		return t.Classification
	}
	t.Classification = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification{}
	return t.Classification
}

// GetOrCreateDependencies retrieves the value of the Dependencies field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetOrCreateDependencies() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies {
	if t.Dependencies != nil {
		return t.Dependencies
	}
	t.Dependencies = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies{}
	return t.Dependencies
}

// GetOrCreateSubmodules retrieves the value of the Submodules field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetOrCreateSubmodules() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules {
	if t.Submodules != nil {
		return t.Submodules
	}
	t.Submodules = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules{}
	return t.Submodules
}

// GetAccess returns the value of the Access struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_Modules_Module. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetAccess() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetClassification returns the value of the Classification struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_Modules_Module. If the receiver or the field Classification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetClassification() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification {
	if t != nil && t.Classification != nil {
		return t.Classification
	}
	return nil
}

// GetDependencies returns the value of the Dependencies struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_Modules_Module. If the receiver or the field Dependencies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetDependencies() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies {
	if t != nil && t.Dependencies != nil {
		return t.Dependencies
	}
	return nil
}

// GetSubmodules returns the value of the Submodules struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_Modules_Module. If the receiver or the field Submodules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetSubmodules() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules {
	if t != nil && t.Submodules != nil {
		return t.Submodules
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNamespace retrieves the value of the leaf Namespace from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Namespace is set, it can safely use t.GetNamespace()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Namespace == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetNamespace() string {
	if t == nil || t.Namespace == nil {
		return ""
	}
	return *t.Namespace
}

// GetPrefix retrieves the value of the leaf Prefix from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetRevision retrieves the value of the leaf Revision from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Revision is set, it can safely use t.GetRevision()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Revision == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetRevision() string {
	if t == nil || t.Revision == nil {
		return ""
	}
	return *t.Revision
}

// GetSummary retrieves the value of the leaf Summary from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Summary is set, it can safely use t.GetSummary()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Summary == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetSummary() string {
	if t == nil || t.Summary == nil {
		return ""
	}
	return *t.Summary
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Version == nil {
		return nil, fmt.Errorf("nil value for key Version")
	}

	return map[string]interface{}{
		"name":    *t.Name,
		"version": *t.Version,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access represents the /openconfig-module-catalog/organizations/organization/modules/module/access YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access struct {
	Md5Hash *string `path:"md5-hash" module:"openconfig-module-catalog"`
	Uri     *string `path:"uri" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access) IsYANGGoStruct() {}

// GetMd5Hash retrieves the value of the leaf Md5Hash from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Md5Hash is set, it can safely use t.GetMd5Hash()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Md5Hash == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access) GetMd5Hash() string {
	if t == nil || t.Md5Hash == nil {
		return ""
	}
	return *t.Md5Hash
}

// GetUri retrieves the value of the leaf Uri from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Uri is set, it can safely use t.GetUri()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Uri == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access) GetUri() string {
	if t == nil || t.Uri == nil {
		return ""
	}
	return *t.Uri
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification represents the /openconfig-module-catalog/organizations/organization/modules/module/classification YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification struct {
	Category         E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE    `path:"category" module:"openconfig-module-catalog"`
	DeploymentStatus E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE      `path:"deployment-status" module:"openconfig-module-catalog"`
	Subcategory      E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE `path:"subcategory" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification) IsYANGGoStruct() {
}

// GetCategory retrieves the value of the leaf Category from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Category is set, it can safely use t.GetCategory()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Category == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification) GetCategory() E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE {
	if t == nil || t.Category == 0 {
		return 0
	}
	return t.Category
}

// GetDeploymentStatus retrieves the value of the leaf DeploymentStatus from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DeploymentStatus is set, it can safely use t.GetDeploymentStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DeploymentStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification) GetDeploymentStatus() E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE {
	if t == nil || t.DeploymentStatus == 0 {
		return 0
	}
	return t.DeploymentStatus
}

// GetSubcategory retrieves the value of the leaf Subcategory from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subcategory is set, it can safely use t.GetSubcategory()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subcategory == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification) GetSubcategory() E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE {
	if t == nil || t.Subcategory == 0 {
		return 0
	}
	return t.Subcategory
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Classification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies represents the /openconfig-module-catalog/organizations/organization/modules/module/dependencies YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies struct {
	RequiredModule []string `path:"required-module" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies) IsYANGGoStruct() {
}

// GetRequiredModule retrieves the value of the leaf RequiredModule from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RequiredModule is set, it can safely use t.GetRequiredModule()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RequiredModule == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies) GetRequiredModule() []string {
	if t == nil || t.RequiredModule == nil {
		return nil
	}
	return t.RequiredModule
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Dependencies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules represents the /openconfig-module-catalog/organizations/organization/modules/module/submodules YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules struct {
	Submodule map[string]*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule `path:"submodule" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) IsYANGGoStruct() {
}

// NewSubmodule creates a new entry in the Submodule list of the
// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) NewSubmodule(Name string) (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Submodule == nil {
		t.Submodule = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Submodule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Submodule", key)
	}

	t.Submodule[key] = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule{
		Name: &Name,
	}

	return t.Submodule[key], nil
}

// RenameSubmodule renames an entry in the list Submodule within
// the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) RenameSubmodule(oldK, newK string) error {
	if _, ok := t.Submodule[newK]; ok {
		return fmt.Errorf("key %v already exists in Submodule", newK)
	}

	e, ok := t.Submodule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Submodule", oldK)
	}
	e.Name = &newK

	t.Submodule[newK] = e
	delete(t.Submodule, oldK)
	return nil
}

// GetOrCreateSubmodule retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) GetOrCreateSubmodule(Name string) *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule {

	key := Name

	if v, ok := t.Submodule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubmodule(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubmodule got unexpected error: %v", err))
	}
	return v
}

// GetSubmodule retrieves the value with the specified key from
// the Submodule map field of OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) GetSubmodule(Name string) *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Submodule[key]; ok {
		return lm
	}
	return nil
}

// AppendSubmodule appends the supplied OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule struct to the
// list Submodule of OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) AppendSubmodule(v *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Submodule == nil {
		t.Submodule = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule)
	}

	if _, ok := t.Submodule[key]; ok {
		return fmt.Errorf("duplicate key for list Submodule %v", key)
	}

	t.Submodule[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule represents the /openconfig-module-catalog/organizations/organization/modules/module/submodules/submodule YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule struct {
	Access *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access `path:"access" module:"openconfig-module-catalog"`
	Name   *string                                                                                        `path:"name" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) IsYANGGoStruct() {
}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) GetOrCreateAccess() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access{}
	return t.Access
}

// GetAccess returns the value of the Access struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) GetAccess() *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access represents the /openconfig-module-catalog/organizations/organization/modules/module/submodules/submodule/access YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access struct {
	Md5Hash *string `path:"md5-hash" module:"openconfig-module-catalog"`
	Uri     *string `path:"uri" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access) IsYANGGoStruct() {
}

// GetMd5Hash retrieves the value of the leaf Md5Hash from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Md5Hash is set, it can safely use t.GetMd5Hash()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Md5Hash == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access) GetMd5Hash() string {
	if t == nil || t.Md5Hash == nil {
		return ""
	}
	return *t.Md5Hash
}

// GetUri retrieves the value of the leaf Uri from the OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Uri is set, it can safely use t.GetUri()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Uri == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access) GetUri() string {
	if t == nil || t.Uri == nil {
		return ""
	}
	return *t.Uri
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_Modules_Module_Submodules_Submodule_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles represents the /openconfig-module-catalog/organizations/organization/release-bundles YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles struct {
	ReleaseBundle map[OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle `path:"release-bundle" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) IsYANGGoStruct() {}

// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key represents the key for list ReleaseBundle of element /openconfig-module-catalog/organizations/organization/release-bundles.
type OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key struct {
	Name    string `path:"name"`
	Version string `path:"version"`
}

// NewReleaseBundle creates a new entry in the ReleaseBundle list of the
// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) NewReleaseBundle(Name string, Version string) (*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReleaseBundle == nil {
		t.ReleaseBundle = make(map[OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle)
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key{
		Name:    Name,
		Version: Version,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ReleaseBundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ReleaseBundle", key)
	}

	t.ReleaseBundle[key] = &OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle{
		Name:    &Name,
		Version: &Version,
	}

	return t.ReleaseBundle[key], nil
}

// RenameReleaseBundle renames an entry in the list ReleaseBundle within
// the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) RenameReleaseBundle(oldK, newK OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key) error {
	if _, ok := t.ReleaseBundle[newK]; ok {
		return fmt.Errorf("key %v already exists in ReleaseBundle", newK)
	}

	e, ok := t.ReleaseBundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ReleaseBundle", oldK)
	}
	e.Name = &newK.Name
	e.Version = &newK.Version

	t.ReleaseBundle[newK] = e
	delete(t.ReleaseBundle, oldK)
	return nil
}

// GetOrCreateReleaseBundle retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) GetOrCreateReleaseBundle(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle {

	key := OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key{
		Name:    Name,
		Version: Version,
	}

	if v, ok := t.ReleaseBundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReleaseBundle(Name, Version)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReleaseBundle got unexpected error: %v", err))
	}
	return v
}

// GetReleaseBundle retrieves the value with the specified key from
// the ReleaseBundle map field of OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) GetReleaseBundle(Name string, Version string) *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle {

	if t == nil {
		return nil
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key{
		Name:    Name,
		Version: Version,
	}

	if lm, ok := t.ReleaseBundle[key]; ok {
		return lm
	}
	return nil
}

// AppendReleaseBundle appends the supplied OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle struct to the
// list ReleaseBundle of OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) AppendReleaseBundle(v *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	if v.Version == nil {
		return fmt.Errorf("invalid nil key for Version")
	}

	key := OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key{
		Name:    *v.Name,
		Version: *v.Version,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReleaseBundle == nil {
		t.ReleaseBundle = make(map[OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Key]*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle)
	}

	if _, ok := t.ReleaseBundle[key]; ok {
		return fmt.Errorf("duplicate key for list ReleaseBundle %v", key)
	}

	t.ReleaseBundle[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle represents the /openconfig-module-catalog/organizations/organization/release-bundles/release-bundle YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle struct {
	Members *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members `path:"members" module:"openconfig-module-catalog"`
	Name    *string                                                                                  `path:"name" module:"openconfig-module-catalog"`
	Version *string                                                                                  `path:"version" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) IsYANGGoStruct() {
}

// GetOrCreateMembers retrieves the value of the Members field
// or returns the existing field if it already exists.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) GetOrCreateMembers() *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members {
	if t.Members != nil {
		return t.Members
	}
	t.Members = &OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members{}
	return t.Members
}

// GetMembers returns the value of the Members struct pointer
// from OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle. If the receiver or the field Members is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) GetMembers() *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members {
	if t != nil && t.Members != nil {
		return t.Members
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Version == nil {
		return nil, fmt.Errorf("nil value for key Version")
	}

	return map[string]interface{}{
		"name":    *t.Name,
		"version": *t.Version,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members represents the /openconfig-module-catalog/organizations/organization/release-bundles/release-bundle/members YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members struct {
	Member map[string]*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member `path:"member" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) IsYANGGoStruct() {
}

// NewMember creates a new entry in the Member list of the
// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) NewMember(Id string) (*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member{
		Id: &Id,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.Id = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) GetOrCreateMember(Id string) *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member {

	key := Id

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) GetMember(Id string) *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// AppendMember appends the supplied OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member struct to the
// list Member of OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members. If the key value(s) specified in
// the supplied OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member already exist in the list, an error is
// returned.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) AppendMember(v *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member represents the /openconfig-module-catalog/organizations/organization/release-bundles/release-bundle/members/member YANG schema element.
type OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member struct {
	CompatibleVersions []string                                     `path:"compatible-versions" module:"openconfig-module-catalog"`
	Id                 *string                                      `path:"id" module:"openconfig-module-catalog"`
	Module             *string                                      `path:"module" module:"openconfig-module-catalog"`
	Publisher          *string                                      `path:"publisher" module:"openconfig-module-catalog"`
	ReleaseBundle      *string                                      `path:"release-bundle" module:"openconfig-module-catalog"`
	Type               E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE `path:"type" module:"openconfig-module-catalog"`
}

// IsYANGGoStruct ensures that OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) IsYANGGoStruct() {
}

// GetCompatibleVersions retrieves the value of the leaf CompatibleVersions from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CompatibleVersions is set, it can safely use t.GetCompatibleVersions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CompatibleVersions == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetCompatibleVersions() []string {
	if t == nil || t.CompatibleVersions == nil {
		return nil
	}
	return t.CompatibleVersions
}

// GetId retrieves the value of the leaf Id from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetModule retrieves the value of the leaf Module from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Module is set, it can safely use t.GetModule()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Module == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetModule() string {
	if t == nil || t.Module == nil {
		return ""
	}
	return *t.Module
}

// GetPublisher retrieves the value of the leaf Publisher from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Publisher is set, it can safely use t.GetPublisher()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Publisher == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetPublisher() string {
	if t == nil || t.Publisher == nil {
		return ""
	}
	return *t.Publisher
}

// GetReleaseBundle retrieves the value of the leaf ReleaseBundle from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReleaseBundle is set, it can safely use t.GetReleaseBundle()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReleaseBundle == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetReleaseBundle() string {
	if t == nil || t.ReleaseBundle == nil {
		return ""
	}
	return *t.ReleaseBundle
}

// GetType retrieves the value of the leaf Type from the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) GetType() E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member struct, which is a YANG list entry.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigModuleCatalog_Organizations_Organization_ReleaseBundles_ReleaseBundle_Members_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE. An additional value named
// OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE.
func (E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE.
func (e E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE")
}

const (
	// OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_UNSET corresponds to the value UNSET of OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE
	OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_UNSET E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE = 0
	// OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_FEATURE_BUNDLE corresponds to the value FEATURE_BUNDLE of OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE
	OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_FEATURE_BUNDLE E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE = 1
	// OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_MODULE corresponds to the value MODULE of OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE
	OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_MODULE E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE = 2
	// OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_RELEASE_BUNDLE corresponds to the value RELEASE_BUNDLE of OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE
	OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE_RELEASE_BUNDLE E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE = 3
)

// E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE. An additional value named
// OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE int64

// IsYANGGoEnum ensures that OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE.
func (E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE.
func (e E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE")
}

const (
	// OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_UNSET corresponds to the value UNSET of OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE
	OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_UNSET E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE = 0
	// OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_COMPLETE corresponds to the value COMPLETE of OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE
	OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_COMPLETE E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE = 1
	// OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_IN_PROGRESS corresponds to the value IN_PROGRESS of OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE
	OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_IN_PROGRESS E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE = 2
	// OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_PARTIAL corresponds to the value PARTIAL of OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE
	OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_PARTIAL E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE = 3
	// OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_PLANNED corresponds to the value PLANNED of OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE
	OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE_PLANNED E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE = 4
)

// E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE is a derived int64 type which is used to represent
// the enumerated node OpenconfigCatalogTypes_MODULE_CATEGORY_BASE. An additional value named
// OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE int64

// IsYANGGoEnum ensures that OpenconfigCatalogTypes_MODULE_CATEGORY_BASE implements the yang.GoEnum
// interface. This ensures that OpenconfigCatalogTypes_MODULE_CATEGORY_BASE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigCatalogTypes_MODULE_CATEGORY_BASE.
func (E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE.
func (e E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE")
}

const (
	// OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_UNSET corresponds to the value UNSET of OpenconfigCatalogTypes_MODULE_CATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_UNSET E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE = 0
	// OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_IETF_MODEL_LAYER corresponds to the value IETF_MODEL_LAYER of OpenconfigCatalogTypes_MODULE_CATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_IETF_MODEL_LAYER E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE = 1
	// OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_IETF_NETWORK_ELEMENT corresponds to the value IETF_NETWORK_ELEMENT of OpenconfigCatalogTypes_MODULE_CATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_IETF_NETWORK_ELEMENT E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE = 2
	// OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_IETF_NETWORK_SERVICE corresponds to the value IETF_NETWORK_SERVICE of OpenconfigCatalogTypes_MODULE_CATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_CATEGORY_BASE_IETF_NETWORK_SERVICE E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE = 3
)

// E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigCatalogTypes_MODULE_STATUS_TYPE. An additional value named
// OpenconfigCatalogTypes_MODULE_STATUS_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE int64

// IsYANGGoEnum ensures that OpenconfigCatalogTypes_MODULE_STATUS_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigCatalogTypes_MODULE_STATUS_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigCatalogTypes_MODULE_STATUS_TYPE.
func (E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE.
func (e E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE")
}

const (
	// OpenconfigCatalogTypes_MODULE_STATUS_TYPE_UNSET corresponds to the value UNSET of OpenconfigCatalogTypes_MODULE_STATUS_TYPE
	OpenconfigCatalogTypes_MODULE_STATUS_TYPE_UNSET E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE = 0
	// OpenconfigCatalogTypes_MODULE_STATUS_TYPE_EXPERIMENTAL corresponds to the value EXPERIMENTAL of OpenconfigCatalogTypes_MODULE_STATUS_TYPE
	OpenconfigCatalogTypes_MODULE_STATUS_TYPE_EXPERIMENTAL E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE = 1
	// OpenconfigCatalogTypes_MODULE_STATUS_TYPE_PRODUCTION corresponds to the value PRODUCTION of OpenconfigCatalogTypes_MODULE_STATUS_TYPE
	OpenconfigCatalogTypes_MODULE_STATUS_TYPE_PRODUCTION E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE = 2
)

// E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE is a derived int64 type which is used to represent
// the enumerated node OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE. An additional value named
// OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE int64

// IsYANGGoEnum ensures that OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE implements the yang.GoEnum
// interface. This ensures that OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE.
func (E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE.
func (e E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE")
}

const (
	// OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_UNSET corresponds to the value UNSET of OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_UNSET E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE = 0
	// OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_MODEL_TYPE corresponds to the value IETF_MODEL_TYPE of OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_MODEL_TYPE E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE = 1
	// OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_TYPE_STANDARD corresponds to the value IETF_TYPE_STANDARD of OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_TYPE_STANDARD E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE = 2
	// OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_TYPE_USER corresponds to the value IETF_TYPE_USER of OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_TYPE_USER E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE = 3
	// OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_TYPE_VENDOR corresponds to the value IETF_TYPE_VENDOR of OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE
	OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE_IETF_TYPE_VENDOR E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE = 4
)

// E_OpenconfigCatalogTypes_ORGANIZATION_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigCatalogTypes_ORGANIZATION_TYPE. An additional value named
// OpenconfigCatalogTypes_ORGANIZATION_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigCatalogTypes_ORGANIZATION_TYPE int64

// IsYANGGoEnum ensures that OpenconfigCatalogTypes_ORGANIZATION_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigCatalogTypes_ORGANIZATION_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigCatalogTypes_ORGANIZATION_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigCatalogTypes_ORGANIZATION_TYPE.
func (E_OpenconfigCatalogTypes_ORGANIZATION_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_OpenconfigCatalogTypes_ORGANIZATION_TYPE.
func (e E_OpenconfigCatalogTypes_ORGANIZATION_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigCatalogTypes_ORGANIZATION_TYPE")
}

const (
	// OpenconfigCatalogTypes_ORGANIZATION_TYPE_UNSET corresponds to the value UNSET of OpenconfigCatalogTypes_ORGANIZATION_TYPE
	OpenconfigCatalogTypes_ORGANIZATION_TYPE_UNSET E_OpenconfigCatalogTypes_ORGANIZATION_TYPE = 0
	// OpenconfigCatalogTypes_ORGANIZATION_TYPE_COMMERCIAL corresponds to the value COMMERCIAL of OpenconfigCatalogTypes_ORGANIZATION_TYPE
	OpenconfigCatalogTypes_ORGANIZATION_TYPE_COMMERCIAL E_OpenconfigCatalogTypes_ORGANIZATION_TYPE = 1
	// OpenconfigCatalogTypes_ORGANIZATION_TYPE_INDIVIDUAL corresponds to the value INDIVIDUAL of OpenconfigCatalogTypes_ORGANIZATION_TYPE
	OpenconfigCatalogTypes_ORGANIZATION_TYPE_INDIVIDUAL E_OpenconfigCatalogTypes_ORGANIZATION_TYPE = 2
	// OpenconfigCatalogTypes_ORGANIZATION_TYPE_INDUSTRY corresponds to the value INDUSTRY of OpenconfigCatalogTypes_ORGANIZATION_TYPE
	OpenconfigCatalogTypes_ORGANIZATION_TYPE_INDUSTRY E_OpenconfigCatalogTypes_ORGANIZATION_TYPE = 3
	// OpenconfigCatalogTypes_ORGANIZATION_TYPE_STANDARDS corresponds to the value STANDARDS of OpenconfigCatalogTypes_ORGANIZATION_TYPE
	OpenconfigCatalogTypes_ORGANIZATION_TYPE_STANDARDS E_OpenconfigCatalogTypes_ORGANIZATION_TYPE = 4
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE": {
		1: {Name: "FEATURE_BUNDLE", DefiningModule: "openconfig-catalog-types"},
		2: {Name: "MODULE", DefiningModule: "openconfig-catalog-types"},
		3: {Name: "RELEASE_BUNDLE", DefiningModule: "openconfig-catalog-types"},
	},
	"E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE": {
		1: {Name: "COMPLETE", DefiningModule: "openconfig-catalog-types"},
		2: {Name: "IN_PROGRESS", DefiningModule: "openconfig-catalog-types"},
		3: {Name: "PARTIAL", DefiningModule: "openconfig-catalog-types"},
		4: {Name: "PLANNED", DefiningModule: "openconfig-catalog-types"},
	},
	"E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE": {
		1: {Name: "IETF_MODEL_LAYER", DefiningModule: "openconfig-catalog-types"},
		2: {Name: "IETF_NETWORK_ELEMENT", DefiningModule: "openconfig-catalog-types"},
		3: {Name: "IETF_NETWORK_SERVICE", DefiningModule: "openconfig-catalog-types"},
	},
	"E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE": {
		1: {Name: "EXPERIMENTAL", DefiningModule: "openconfig-catalog-types"},
		2: {Name: "PRODUCTION", DefiningModule: "openconfig-catalog-types"},
	},
	"E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE": {
		1: {Name: "IETF_MODEL_TYPE", DefiningModule: "openconfig-catalog-types"},
		2: {Name: "IETF_TYPE_STANDARD", DefiningModule: "openconfig-catalog-types"},
		3: {Name: "IETF_TYPE_USER", DefiningModule: "openconfig-catalog-types"},
		4: {Name: "IETF_TYPE_VENDOR", DefiningModule: "openconfig-catalog-types"},
	},
	"E_OpenconfigCatalogTypes_ORGANIZATION_TYPE": {
		1: {Name: "COMMERCIAL", DefiningModule: "openconfig-catalog-types"},
		2: {Name: "INDIVIDUAL", DefiningModule: "openconfig-catalog-types"},
		3: {Name: "INDUSTRY", DefiningModule: "openconfig-catalog-types"},
		4: {Name: "STANDARDS", DefiningModule: "openconfig-catalog-types"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6d, 0x6f, 0xda, 0x5a,
		0x12, 0xfe, 0x9e, 0x5f, 0x81, 0xfc, 0xe9, 0x5e, 0xa9, 0x34, 0x8d, 0xb6, 0xbd, 0xed, 0xad, 0x74,
		0x3f, 0x38, 0xc1, 0xed, 0xa2, 0xf2, 0x12, 0x19, 0xd2, 0xdd, 0x6e, 0x14, 0x21, 0xc7, 0x9c, 0x24,
		0xd6, 0x82, 0x61, 0xfd, 0xd2, 0xbd, 0xd9, 0x55, 0xfe, 0xfb, 0x15, 0xd8, 0x38, 0x60, 0x30, 0x9c,
		0x33, 0x33, 0xc7, 0x18, 0x98, 0xaa, 0x52, 0x62, 0x62, 0x1f, 0xce, 0xcb, 0x3c, 0xcf, 0xcc, 0x99,
		0x99, 0x33, 0xfe, 0xff, 0x59, 0xad, 0x56, 0xab, 0x19, 0x1d, 0x67, 0x2c, 0x8c, 0xcf, 0x35, 0xc3,
		0x78, 0x93, 0x5c, 0x7f, 0xf3, 0xfc, 0xa1, 0xf1, 0xb9, 0xf6, 0x2e, 0xbd, 0xbc, 0x9a, 0xf8, 0x0f,
		0xde, 0xe3, 0xd2, 0x07, 0x0d, 0x2f, 0x30, 0x3e, 0xd7, 0x92, 0x87, 0xe7, 0x1f, 0x4c, 0x82, 0x47,
		0xc7, 0xf7, 0xfe, 0xe7, 0x44, 0xde, 0xc4, 0x0f, 0x57, 0xfe, 0xb4, 0xd2, 0xfe, 0xea, 0x6d, 0x6f,
		0x56, 0x6f, 0x4a, 0xbf, 0xf4, 0x22, 0xf7, 0x71, 0xfe, 0xcb, 0xb3, 0x3f, 0x5c, 0x07, 0xe2, 0xc1,
		0xfb, 0x73, 0xed, 0xcb, 0x56, 0xbf, 0xd0, 0xad, 0xbb, 0x4e, 0x94, 0xfb, 0xa6, 0xf9, 0x1d, 0xbd,
		0x49, 0x1c, 0xb8, 0x62, 0xe3, 0xd3, 0x49, 0x6f, 0xc4, 0xf3, 0x7f, 0x27, 0xc1, 0xac, 0x43, 0xc6,
		0x34, 0xf9, 0xa2, 0x37, 0x9b, 0x6f, 0xfc, 0xbb, 0x13, 0x9a, 0xc1, 0x63, 0x3c, 0x16, 0x7e, 0x64,
		0x7c, 0xae, 0x45, 0x41, 0x2c, 0x0a, 0x6e, 0x5c, 0xba, 0x6b, 0xd1, 0xaf, 0xb5, 0x1b, 0x5f, 0x56,
		0x3e, 0x79, 0xc9, 0x8d, 0x38, 0x3f, 0xed, 0x1b, 0xa7, 0xbf, 0x78, 0x48, 0x9b, 0x56, 0xa1, 0x68,
		0x54, 0x9b, 0x17, 0x63, 0xe7, 0xa2, 0xc8, 0x2c, 0x8e, 0xfc, 0x22, 0xc9, 0x2e, 0x96, 0xf2, 0xa2,
		0x29, 0x2f, 0x9e, 0xd2, 0x22, 0x6e, 0x5e, 0xcc, 0x82, 0x45, 0xdd, 0xb9, 0xb8, 0xd9, 0x0d, 0xee,
		0xc4, 0x8f, 0x1c, 0x37, 0xda, 0x3d, 0x0b, 0x8b, 0x79, 0x5d, 0x3c, 0xb0, 0x63, 0x48, 0xab, 0x60,
		0x2f, 0xbc, 0x6d, 0xd7, 0x92, 0xab, 0x2c, 0xbd, 0xba, 0x08, 0xa8, 0x8a, 0x02, 0x58, 0x24, 0xc0,
		0xa2, 0x01, 0x12, 0x91, 0xed, 0xa2, 0xb2, 0x43, 0x64, 0xb2, 0x6f, 0xec, 0x3f, 0x4f, 0x85, 0xda,
		0x7c, 0x87, 0x51, 0xe0, 0xf9, 0x8f, 0x32, 0xf3, 0xbd, 0x20, 0x82, 0x4f, 0x67, 0xb0, 0xfe, 0x6f,
		0xe9, 0xbb, 0xf1, 0x20, 0x9c, 0x28, 0x0e, 0x44, 0xfd, 0x3e, 0xf6, 0x87, 0x23, 0x11, 0xca, 0x4b,
		0x76, 0xfe, 0x41, 0x39, 0x09, 0xbf, 0x60, 0x09, 0x3f, 0x54, 0x09, 0xdf, 0x45, 0x8e, 0x05, 0x22,
		0x25, 0x3f, 0x89, 0x9b, 0x25, 0x4b, 0x76, 0x26, 0xe5, 0x04, 0x4c, 0x59, 0xd0, 0x20, 0x02, 0x07,
		0x17, 0x3c, 0xa8, 0x00, 0xa2, 0x05, 0x11, 0x2d, 0x90, 0x28, 0xc1, 0x94, 0x13, 0x50, 0x49, 0x41,
		0x55, 0x16, 0x58, 0x30, 0x17, 0x12, 0x71, 0x23, 0x52, 0x94, 0xc1, 0x22, 0x8d, 0x11, 0x6d, 0xbc,
		0x88, 0x63, 0x45, 0x9d, 0x4c, 0xe4, 0xc9, 0x44, 0x9f, 0x04, 0x02, 0x6a, 0x50, 0x50, 0x84, 0x04,
		0x18, 0x1a, 0x58, 0x6e, 0xa7, 0xe5, 0x7a, 0x22, 0xc0, 0xa0, 0x81, 0x43, 0x01, 0x20, 0x3a, 0x20,
		0x51, 0x01, 0x8a, 0x1c, 0x58, 0xe4, 0x00, 0x23, 0x05, 0x1a, 0x0c, 0x70, 0x40, 0xe0, 0xa1, 0x01,
		0x98, 0x35, 0xe0, 0x27, 0xe2, 0x82, 0x5c, 0xe2, 0x85, 0xd0, 0xcd, 0x5b, 0x43, 0x2e, 0x86, 0xdc,
		0x1e, 0x56, 0x3b, 0x18, 0x29, 0x41, 0x49, 0x0f, 0x4e, 0x6a, 0x90, 0x6a, 0x03, 0xab, 0x36, 0xd0,
		0x6a, 0x01, 0x2f, 0x0e, 0xc4, 0x48, 0x30, 0xab, 0xfb, 0x00, 0xa4, 0xe5, 0x6d, 0x24, 0x9c, 0x87,
		0x40, 0x3c, 0x50, 0x08, 0xdc, 0x42, 0x47, 0x7e, 0x24, 0x68, 0xeb, 0xda, 0x89, 0x9e, 0x66, 0xdd,
		0x7b, 0xfb, 0xf6, 0x7c, 0xfd, 0xff, 0x8a, 0x83, 0x79, 0xe5, 0xea, 0x76, 0x46, 0x33, 0x7f, 0xb8,
		0x71, 0x10, 0x08, 0x3f, 0xfa, 0xe5, 0xd7, 0xd9, 0xcd, 0xd3, 0xf8, 0x7e, 0xe4, 0x85, 0x4f, 0x22,
		0xb8, 0x3b, 0xcf, 0x19, 0xcd, 0xb9, 0xeb, 0xf3, 0x39, 0x45, 0x9d, 0xed, 0x47, 0x38, 0x10, 0x82,
		0x61, 0x64, 0x23, 0xa4, 0x63, 0xeb, 0xd7, 0x26, 0x99, 0xb2, 0x99, 0xb2, 0x99, 0xb2, 0x99, 0xb2,
		0xb5, 0x51, 0xf6, 0xc1, 0xd2, 0xee, 0x4f, 0x11, 0x84, 0xdb, 0x22, 0x71, 0xca, 0xeb, 0xba, 0x68,
		0x90, 0x29, 0x97, 0x29, 0x97, 0x29, 0xb7, 0x52, 0x94, 0x3b, 0x9e, 0x0c, 0xe3, 0x91, 0xa8, 0xa7,
		0x08, 0xad, 0x47, 0xb3, 0x2f, 0x20, 0xa4, 0xdf, 0x4f, 0xfb, 0xa2, 0xbf, 0x52, 0x3d, 0x12, 0xdf,
		0xc4, 0x33, 0xd2, 0x13, 0x60, 0xb4, 0xbc, 0x30, 0x32, 0xa3, 0x08, 0xe9, 0xd9, 0x68, 0x7b, 0xbe,
		0x35, 0x12, 0x33, 0x99, 0x0f, 0x71, 0xfc, 0x66, 0xb4, 0x9d, 0x3f, 0x97, 0x5a, 0xba, 0xf8, 0xf4,
		0xfe, 0xfd, 0x6f, 0x1f, 0xdf, 0xbf, 0x7f, 0xf7, 0xf1, 0x6f, 0x1f, 0xdf, 0xfd, 0xfe, 0xe1, 0xc3,
		0xc5, 0x6f, 0x17, 0x1f, 0x10, 0x8d, 0x77, 0x83, 0xa1, 0x08, 0xc4, 0xf0, 0x72, 0x36, 0x6b, 0x7e,
		0x3c, 0x1a, 0x95, 0xba, 0x58, 0xa6, 0xef, 0x4f, 0xa2, 0xed, 0xa9, 0x26, 0x52, 0xed, 0x84, 0xee,
		0x93, 0x18, 0x3b, 0xd3, 0xd4, 0x36, 0x38, 0x9f, 0x4c, 0x85, 0xef, 0xce, 0x35, 0x4b, 0x3d, 0xc5,
		0x94, 0xeb, 0x44, 0xce, 0x68, 0xf2, 0xb8, 0xcd, 0x42, 0xd8, 0xb1, 0x6f, 0xdb, 0xfe, 0x67, 0x8c,
		0x9f, 0x33, 0x8c, 0x82, 0xd8, 0x8d, 0x52, 0x47, 0x98, 0xd1, 0xcd, 0xfa, 0xde, 0x9e, 0x77, 0xfd,
		0x2a, 0xe9, 0xf9, 0xa0, 0xbb, 0xdc, 0xf3, 0x95, 0xab, 0xc1, 0x97, 0xa4, 0x2b, 0x97, 0x49, 0xcf,
		0x56, 0x2f, 0xb7, 0xfe, 0x11, 0x46, 0xc1, 0x2f, 0x15, 0x0b, 0x02, 0x20, 0x85, 0x68, 0x0f, 0xc2,
		0x03, 0x09, 0x2f, 0x95, 0x29, 0x25, 0x6a, 0x72, 0x21, 0xbf, 0xba, 0x0a, 0x2b, 0x0b, 0x73, 0x0c,
		0x63, 0x1c, 0xc1, 0x40, 0x93, 0x96, 0xc3, 0x95, 0x1c, 0xae, 0xd4, 0x6e, 0x32, 0xaa, 0x27, 0x5b,
		0x11, 0x59, 0x81, 0x7a, 0xb0, 0x9d, 0x72, 0x2d, 0x10, 0xdb, 0xf3, 0xa7, 0x19, 0xdb, 0x8c, 0x6d,
		0xc6, 0x36, 0x0e, 0xdb, 0x8a, 0x23, 0x44, 0x6d, 0x8b, 0xf0, 0xdb, 0x21, 0x2d, 0xdb, 0x20, 0xdc,
		0xf6, 0x47, 0x0f, 0x3b, 0x06, 0x62, 0x24, 0x9c, 0x10, 0x9c, 0x9b, 0x92, 0xc9, 0x53, 0xae, 0x1d,
		0x4e, 0xde, 0x62, 0xc6, 0xac, 0x14, 0x63, 0x82, 0x93, 0xb7, 0x50, 0x39, 0x23, 0x14, 0xb9, 0x22,
		0x48, 0xef, 0x37, 0x27, 0x6a, 0x95, 0xe3, 0xd5, 0xe6, 0x44, 0x2d, 0x42, 0x6f, 0x35, 0x61, 0x60,
		0x90, 0x22, 0x20, 0xb8, 0x25, 0x10, 0x08, 0x4d, 0xdc, 0x58, 0xd5, 0x97, 0x61, 0xee, 0x1a, 0x11,
		0x41, 0x04, 0x38, 0xcc, 0x00, 0x2a, 0x0c, 0x9f, 0xa0, 0x41, 0x96, 0x98, 0xc1, 0xfc, 0xc8, 0xfc,
		0xc8, 0xfc, 0x78, 0x78, 0xfc, 0x58, 0x79, 0x8e, 0xc3, 0x66, 0x43, 0x10, 0x65, 0x41, 0x30, 0xbf,
		0x31, 0xbf, 0x9d, 0x2c, 0xbf, 0xd1, 0x66, 0x29, 0x20, 0xb3, 0x13, 0x38, 0x16, 0xa9, 0x1c, 0x8b,
		0x44, 0xb9, 0x85, 0x6a, 0xfa, 0x43, 0x91, 0x76, 0xd2, 0x3f, 0x48, 0x84, 0x5a, 0x8f, 0x3f, 0x0e,
		0xaa, 0x74, 0x90, 0xca, 0x86, 0x63, 0x16, 0xec, 0x81, 0xab, 0x7c, 0xcc, 0x82, 0x46, 0x19, 0xe8,
		0x0f, 0x4e, 0x92, 0x1e, 0xc8, 0x5e, 0x4a, 0x31, 0xab, 0xa9, 0x61, 0x1b, 0x16, 0x43, 0x81, 0xc7,
		0x4e, 0x48, 0x63, 0x26, 0xb0, 0x58, 0x89, 0xec, 0xa4, 0x02, 0x35, 0x67, 0x09, 0x1a, 0x53, 0xa5,
		0xde, 0x81, 0x56, 0xd5, 0x28, 0x47, 0x1f, 0x2f, 0x9a, 0xeb, 0x67, 0x28, 0x2e, 0x94, 0x8e, 0x05,
		0x92, 0x29, 0x7d, 0x42, 0xbc, 0x12, 0x86, 0x86, 0x9a, 0x35, 0xde, 0x78, 0x9a, 0x60, 0xb3, 0xa0,
		0xd6, 0x59, 0x21, 0xeb, 0xe6, 0x1f, 0xe4, 0x9a, 0x35, 0x5c, 0xb3, 0x66, 0x93, 0x48, 0xa9, 0xd7,
		0xac, 0xc9, 0x3d, 0xcf, 0x35, 0x6b, 0x4a, 0xb4, 0x40, 0x4f, 0xba, 0x66, 0xcd, 0x50, 0x84, 0x6e,
		0xe0, 0x4d, 0x23, 0xd4, 0x46, 0x6b, 0xb9, 0x11, 0xde, 0x6c, 0xf1, 0x66, 0xeb, 0xc8, 0x36, 0x5b,
		0xc7, 0x91, 0xfc, 0xc9, 0xd5, 0xa9, 0x18, 0xf1, 0x9c, 0xe0, 0xa4, 0x00, 0x11, 0xae, 0x4e, 0x85,
		0x06, 0x10, 0x1d, 0x90, 0xa8, 0x00, 0x45, 0x0e, 0x2c, 0x72, 0x80, 0x91, 0x02, 0x0d, 0x06, 0x38,
		0x20, 0xf0, 0xd0, 0x00, 0xcc, 0x1a, 0xe0, 0xea, 0x54, 0x25, 0x80, 0x92, 0x1e, 0x9c, 0xd4, 0x20,
		0xd5, 0x06, 0x56, 0x6d, 0xa0, 0xd5, 0x02, 0x5e, 0x1c, 0x88, 0x91, 0x60, 0xc6, 0xdb, 0xd1, 0x85,
		0xf2, 0xc6, 0xd5, 0xa9, 0xb8, 0x3a, 0xd5, 0xba, 0x54, 0x70, 0x75, 0x2a, 0xa6, 0x6c, 0xa6, 0x6c,
		0xa6, 0xec, 0x12, 0x28, 0x9b, 0xab, 0x53, 0x71, 0x75, 0x2a, 0xa6, 0x5c, 0xa6, 0xdc, 0x4a, 0x53,
		0x2e, 0x57, 0xa7, 0x22, 0xf0, 0x48, 0xc0, 0x53, 0x87, 0xd6, 0x9a, 0xe2, 0x2a, 0x55, 0x65, 0x2d,
		0x5a, 0x95, 0xaa, 0x54, 0xe5, 0x52, 0x3f, 0x72, 0xd7, 0x55, 0xae, 0x52, 0xd5, 0x5c, 0xed, 0x79,
		0xee, 0x9a, 0xeb, 0x54, 0x55, 0x50, 0x7c, 0xf6, 0x92, 0x1c, 0xae, 0x24, 0x27, 0x55, 0xc8, 0x0f,
		0xf7, 0x86, 0xf0, 0x18, 0xa6, 0x37, 0xe4, 0x44, 0x05, 0x8d, 0xa6, 0x29, 0x87, 0x2d, 0x39, 0x51,
		0x01, 0x8c, 0xeb, 0xe9, 0xc8, 0x89, 0x1e, 0x26, 0xc1, 0x18, 0x51, 0xa9, 0x6a, 0xd1, 0x02, 0x63,
		0x9c, 0x31, 0xce, 0x18, 0xaf, 0x30, 0xc6, 0xeb, 0xe8, 0x43, 0x5e, 0x6b, 0x2d, 0x31, 0xe6, 0x19,
		0xf3, 0x8c, 0xf9, 0x0a, 0x62, 0x3e, 0x10, 0x0f, 0x22, 0x10, 0xbe, 0x8b, 0x2a, 0xad, 0xb6, 0x68,
		0x82, 0x51, 0xce, 0x28, 0x3f, 0x32, 0x94, 0xc7, 0x3e, 0xcc, 0x2b, 0x99, 0x81, 0xfc, 0x77, 0xc0,
		0xb3, 0x69, 0xb7, 0x6f, 0x41, 0xcb, 0x42, 0x90, 0x10, 0x18, 0x07, 0xde, 0x21, 0x55, 0x31, 0xb8,
		0xab, 0x00, 0x8f, 0x86, 0x91, 0x13, 0xc5, 0x88, 0xfc, 0xed, 0xf4, 0x79, 0x66, 0x50, 0x66, 0xd0,
		0x23, 0x63, 0x50, 0x6f, 0x28, 0xfc, 0xc8, 0x8b, 0x9e, 0x61, 0x19, 0x0a, 0x19, 0x99, 0x40, 0xea,
		0xd9, 0x36, 0xd3, 0xaf, 0xbe, 0x74, 0x42, 0x82, 0xc4, 0xf1, 0x66, 0xfb, 0xba, 0x65, 0xb5, 0xad,
		0x4e, 0xdf, 0xec, 0x37, 0xbb, 0x9d, 0x41, 0xaf, 0x6f, 0xf6, 0x6f, 0x7a, 0x83, 0xfe, 0x8f, 0x6b,
		0x0b, 0x2a, 0x47, 0xdf, 0x9d, 0x51, 0x3c, 0x3f, 0xf4, 0x71, 0x0b, 0x26, 0x5b, 0xa2, 0x54, 0x83,
		0x66, 0x67, 0x70, 0x6d, 0x77, 0xbf, 0xda, 0x56, 0xaf, 0x67, 0xec, 0x23, 0x79, 0x82, 0x68, 0x18,
		0x57, 0xdd, 0xd9, 0x1a, 0xf5, 0xad, 0x43, 0x1e, 0xc3, 0xb5, 0x69, 0xf7, 0x9b, 0x66, 0xeb, 0xa0,
		0x87, 0xd0, 0x32, 0x3b, 0x1d, 0xab, 0x51, 0x76, 0x66, 0xfc, 0x9d, 0x6e, 0xee, 0xdc, 0x6f, 0x89,
		0x0d, 0xe9, 0xf0, 0x08, 0x17, 0xd6, 0x28, 0x56, 0xb8, 0x7b, 0x2c, 0xac, 0xb1, 0x3d, 0xdc, 0x58,
		0x6a, 0x61, 0x8d, 0xed, 0x61, 0xc5, 0xd3, 0x2d, 0xad, 0xa1, 0x56, 0x4b, 0x42, 0xcb, 0x5a, 0xe8,
		0xa8, 0xad, 0x91, 0x4c, 0x80, 0x42, 0x4d, 0x8d, 0xc5, 0x03, 0x5c, 0x4b, 0x83, 0x6b, 0x69, 0x2c,
		0x8b, 0x90, 0x7a, 0x0d, 0x8d, 0xf4, 0x39, 0xae, 0x9d, 0x51, 0xe2, 0x3e, 0xf5, 0xa4, 0x6b, 0x67,
		0x38, 0xae, 0x2b, 0x42, 0x84, 0x23, 0x26, 0x7d, 0x9e, 0xcf, 0xcf, 0xb3, 0x23, 0xa6, 0x52, 0x8e,
		0x18, 0xf0, 0xf9, 0xf9, 0xf1, 0xf0, 0x43, 0xfd, 0xc9, 0x09, 0x9f, 0xf0, 0x0e, 0x90, 0xac, 0x25,
		0x2e, 0x14, 0xcd, 0x67, 0xe6, 0x4b, 0x06, 0x17, 0xce, 0x33, 0xb0, 0xff, 0x42, 0xd1, 0xe0, 0x68,
		0xf1, 0x9a, 0x8a, 0xf9, 0x54, 0xe1, 0x92, 0xf4, 0x71, 0xe0, 0xe1, 0x69, 0x06, 0x1e, 0x7d, 0x62,
		0x86, 0x61, 0x86, 0x39, 0x59, 0x86, 0x39, 0xb0, 0xa0, 0xed, 0xf1, 0x1f, 0x2f, 0x48, 0x9d, 0x28,
		0xe9, 0xcf, 0x73, 0xd0, 0xc6, 0x82, 0xc6, 0xc5, 0x94, 0xdc, 0x18, 0xa6, 0x3f, 0x07, 0x66, 0xd2,
		0x93, 0x0a, 0x44, 0xcd, 0xdd, 0x91, 0x13, 0x86, 0xde, 0x83, 0xe7, 0x3a, 0xb8, 0x5a, 0x87, 0xb9,
		0x76, 0x78, 0xf3, 0xc6, 0x9b, 0xb7, 0xe3, 0xd8, 0xbc, 0xb9, 0x4e, 0x24, 0x1e, 0x27, 0xc1, 0x33,
		0xde, 0xaa, 0xca, 0x5a, 0x62, 0xd3, 0x8a, 0x4d, 0x2b, 0x36, 0xad, 0x94, 0xe4, 0x05, 0x97, 0xc2,
		0xb2, 0xa6, 0x67, 0x30, 0x67, 0x7f, 0x49, 0x52, 0x5a, 0xd6, 0x06, 0xd8, 0xee, 0x36, 0x6e, 0x5a,
		0xd6, 0xe0, 0xca, 0xec, 0x5b, 0x5f, 0xbb, 0xf6, 0x8f, 0xc1, 0xa5, 0xd9, 0xb3, 0xb0, 0x92, 0x48,
		0x90, 0xdc, 0xb2, 0xf8, 0x47, 0x54, 0x8a, 0x21, 0x4b, 0x76, 0xb1, 0xfa, 0x5f, 0x06, 0xed, 0x6e,
		0xc3, 0x6a, 0x0d, 0x5a, 0xe6, 0x0f, 0xcb, 0xa6, 0xaa, 0xc8, 0x40, 0x38, 0x62, 0xda, 0x91, 0x6f,
		0x9e, 0x81, 0x8e, 0xd5, 0xff, 0x47, 0xd7, 0xfe, 0x36, 0xb0, 0x92, 0xac, 0x26, 0x83, 0xec, 0xab,
		0x5e, 0xde, 0x1c, 0xd4, 0xf8, 0x7b, 0x96, 0xfd, 0xbd, 0x79, 0x65, 0x11, 0x8e, 0x9f, 0xa4, 0xa5,
		0xbb, 0xb3, 0x0a, 0xac, 0x83, 0x0e, 0xe4, 0x91, 0xcb, 0x5d, 0xc5, 0xc7, 0x49, 0x26, 0x5f, 0x38,
		0xb9, 0xba, 0x2b, 0x5b, 0x6d, 0x97, 0xe2, 0x71, 0x1c, 0x8a, 0xe9, 0x68, 0xf2, 0x3c, 0x33, 0x50,
		0xea, 0xc0, 0x14, 0xec, 0xb5, 0xc5, 0x5b, 0x6f, 0x92, 0x4d, 0x66, 0x36, 0x99, 0xd9, 0x64, 0x66,
		0x93, 0x79, 0x83, 0xc9, 0x8c, 0xcf, 0x02, 0x3f, 0x00, 0x83, 0xd9, 0xfa, 0xe7, 0xb5, 0x65, 0x37,
		0xe7, 0xa9, 0xef, 0xad, 0x63, 0x54, 0xd7, 0xd7, 0x76, 0xb7, 0x71, 0x73, 0xd5, 0x6f, 0x76, 0x3b,
		0xac, 0xa4, 0x75, 0x28, 0xe9, 0x30, 0xbe, 0xa7, 0x73, 0x64, 0x2d, 0x37, 0xc6, 0x8a, 0x99, 0x15,
		0x33, 0x2b, 0x66, 0x56, 0xcc, 0x9b, 0x14, 0xf3, 0xcd, 0xe5, 0xe9, 0xb9, 0xb3, 0x08, 0xcc, 0x90,
		0x43, 0xf5, 0x66, 0xcd, 0x86, 0x3e, 0xb3, 0xc6, 0x3a, 0x0d, 0xd3, 0x6e, 0x9c, 0x9c, 0x2f, 0x6b,
		0x3e, 0xfa, 0xef, 0x56, 0xa7, 0xd1, 0xb5, 0x4f, 0x73, 0xec, 0x37, 0x3d, 0xcb, 0x66, 0x0f, 0x5e,
		0x49, 0x64, 0x43, 0x8c, 0xb5, 0x2a, 0x8f, 0x92, 0x0a, 0x53, 0x55, 0x1e, 0x23, 0x0d, 0x76, 0x8e,
		0x7e, 0xe3, 0x73, 0x6a, 0x09, 0x4b, 0xa8, 0xa4, 0x9a, 0x9a, 0x8e, 0xc4, 0xa5, 0xab, 0xd5, 0x1e,
		0x55, 0x20, 0x81, 0x69, 0x28, 0xa6, 0xc2, 0x1f, 0x0a, 0xdf, 0xf5, 0x30, 0x2f, 0x6f, 0x5c, 0x69,
		0x85, 0x93, 0x97, 0xf4, 0xed, 0x55, 0x39, 0x79, 0xa9, 0xcc, 0xe4, 0xa5, 0x40, 0xfc, 0x27, 0xf6,
		0x02, 0x31, 0xac, 0x2b, 0x1e, 0x1e, 0x2c, 0x94, 0x9b, 0x7c, 0x83, 0xec, 0xfe, 0x61, 0xf7, 0x0f,
		0xbb, 0x7f, 0x94, 0xe4, 0x65, 0xef, 0xe7, 0x50, 0xf8, 0x05, 0x0f, 0xbb, 0x1b, 0xa7, 0x79, 0xc1,
		0x03, 0x5b, 0xb8, 0xbb, 0x2c, 0x5c, 0x84, 0xdd, 0xa5, 0xc5, 0xbe, 0x6d, 0x2c, 0xf7, 0xa7, 0x02,
		0xd6, 0x2d, 0xe8, 0x8d, 0xaf, 0x98, 0x37, 0xbc, 0x72, 0x41, 0x3b, 0xb6, 0x66, 0xb9, 0xf0, 0x6f,
		0x69, 0xd8, 0x0e, 0xa7, 0x8e, 0x8b, 0x04, 0x78, 0xd2, 0x04, 0xa3, 0x9c, 0x51, 0xce, 0x28, 0xaf,
		0x20, 0xca, 0xa7, 0x30, 0xc9, 0x7f, 0x2d, 0xe4, 0x0f, 0xaa, 0x3f, 0xc3, 0xf8, 0x66, 0x7c, 0x33,
		0xbe, 0xcb, 0xc0, 0x77, 0x20, 0x7e, 0x7a, 0xb8, 0x57, 0x75, 0x64, 0x2d, 0x30, 0xc6, 0x19, 0xe3,
		0x8c, 0xf1, 0x0a, 0x62, 0x3c, 0x8c, 0xef, 0x65, 0x0b, 0x38, 0x16, 0xcf, 0xc4, 0x6b, 0x1b, 0x1c,
		0x5f, 0x62, 0x9c, 0x57, 0x0a, 0xe7, 0xe0, 0xf8, 0x52, 0x26, 0xd4, 0x24, 0x49, 0xc5, 0x24, 0x31,
		0xa5, 0x0b, 0x8e, 0x29, 0x71, 0x4c, 0x09, 0xda, 0x58, 0xb9, 0x31, 0x25, 0x28, 0xec, 0xb2, 0x06,
		0x80, 0x95, 0x36, 0x0b, 0xc5, 0x0e, 0x5c, 0x20, 0x87, 0x10, 0x88, 0x64, 0x80, 0xa4, 0x04, 0x26,
		0x3d, 0x40, 0xa9, 0x81, 0xaa, 0x0d, 0xb0, 0xda, 0x80, 0xab, 0x05, 0xc0, 0x38, 0x20, 0x23, 0x01,
		0x4d, 0x06, 0xec, 0xac, 0x21, 0x74, 0xe5, 0xd0, 0x42, 0x01, 0x46, 0x56, 0x12, 0x25, 0xda, 0x8c,
		0x6a, 0x07, 0xbf, 0x0e, 0x12, 0xd0, 0x47, 0x06, 0xba, 0x48, 0x41, 0x3b, 0x39, 0x68, 0x27, 0x09,
		0xad, 0x64, 0x41, 0x43, 0x1a, 0x44, 0xe4, 0x81, 0xdf, 0x7c, 0xeb, 0xdb, 0x94, 0x13, 0x6f, 0xd6,
		0xf5, 0xad, 0x03, 0xc1, 0x1a, 0xa0, 0x2a, 0xa9, 0x16, 0x4e, 0x3d, 0xae, 0x44, 0x24, 0x33, 0x2e,
		0x33, 0x2e, 0x33, 0xee, 0x01, 0x32, 0x2e, 0x1d, 0xec, 0xab, 0x49, 0xb7, 0x7b, 0xb5, 0xb6, 0x91,
		0x69, 0x6d, 0xeb, 0x4e, 0x2d, 0xfa, 0x34, 0xb7, 0x57, 0xe7, 0xef, 0xeb, 0xaf, 0xe7, 0x24, 0xbb,
		0xed, 0x9a, 0x8e, 0x2c, 0xb8, 0x5e, 0xd6, 0xdd, 0xd7, 0x5f, 0x41, 0x35, 0x6b, 0xe9, 0x04, 0x05,
		0x21, 0x24, 0xb0, 0x24, 0xba, 0x42, 0x2c, 0x03, 0x92, 0xea, 0x34, 0xe9, 0x6e, 0x76, 0x91, 0xb0,
		0x8b, 0xe4, 0x50, 0x49, 0x9b, 0x4c, 0xd7, 0xd2, 0xef, 0x6a, 0x88, 0xd4, 0xeb, 0xcb, 0x81, 0x78,
		0xa1, 0xd3, 0x77, 0x5b, 0x22, 0x68, 0x8d, 0x8f, 0x06, 0x94, 0xb6, 0x58, 0x44, 0xb6, 0x4e, 0x59,
		0x36, 0x0e, 0x26, 0x82, 0x55, 0x86, 0x51, 0x63, 0xf0, 0xb9, 0x0e, 0xdd, 0xc2, 0x50, 0x85, 0x53,
		0x1d, 0xaf, 0x4b, 0x6f, 0x54, 0x22, 0x9b, 0x64, 0x3c, 0x76, 0x00, 0x75, 0xb8, 0x96, 0x42, 0xe5,
		0x49, 0x03, 0x9c, 0x2f, 0xa6, 0xcf, 0x68, 0xe4, 0x3c, 0x12, 0xce, 0x17, 0x03, 0x23, 0xfc, 0xa7,
		0x08, 0x70, 0x29, 0xa1, 0x8b, 0x06, 0x18, 0xe1, 0x8c, 0xf0, 0x23, 0x43, 0x78, 0x6a, 0x52, 0xa4,
		0x12, 0x5e, 0x8f, 0x66, 0x0d, 0x56, 0x11, 0xee, 0xa4, 0xef, 0xd0, 0x5d, 0xda, 0x63, 0xd5, 0xd4,
		0xb0, 0x0d, 0xdb, 0x5b, 0xc1, 0xf7, 0x52, 0xa4, 0x7b, 0x27, 0xd8, 0x5e, 0x49, 0x76, 0x52, 0x81,
		0x66, 0xaf, 0x06, 0x73, 0x57, 0xe5, 0x95, 0xd4, 0xc4, 0xb6, 0xad, 0x1c, 0x41, 0xbc, 0x68, 0x7e,
		0x89, 0xb9, 0xe2, 0x52, 0x50, 0x2e, 0x81, 0xcc, 0x7b, 0xe7, 0xa9, 0xe6, 0x7c, 0xfb, 0x64, 0x17,
		0x4f, 0xe1, 0x96, 0xe9, 0x93, 0x73, 0x4e, 0xab, 0x38, 0x9f, 0x25, 0xad, 0x00, 0x69, 0xad, 0xaf,
		0xa2, 0xe5, 0xd5, 0xb5, 0xba, 0xaa, 0x16, 0x07, 0x6b, 0x6d, 0xb0, 0x96, 0x06, 0x69, 0x65, 0x1c,
		0x9c, 0xa4, 0xb5, 0xac, 0xba, 0xdd, 0x2c, 0xa9, 0x38, 0x61, 0xb2, 0x1c, 0x88, 0x91, 0x70, 0x42,
		0x51, 0xbf, 0x8f, 0xfd, 0xa1, 0xcc, 0x61, 0x89, 0xa5, 0x23, 0x50, 0xab, 0x0f, 0xca, 0x49, 0xf8,
		0x05, 0x4b, 0xf8, 0xa1, 0x4a, 0xb8, 0x6c, 0x86, 0x64, 0x4e, 0x32, 0xe4, 0x27, 0x71, 0xb3, 0x64,
		0xc9, 0xce, 0xa4, 0x5a, 0x0a, 0xb3, 0xf2, 0x06, 0x0a, 0xb2, 0x71, 0x82, 0x6f, 0x98, 0xa0, 0x1b,
		0x25, 0xf4, 0x06, 0x09, 0xbd, 0x31, 0x42, 0x6d, 0x88, 0x68, 0x2d, 0x78, 0xd5, 0x94, 0x5e, 0x63,
		0x2c, 0xc6, 0xf7, 0x22, 0x40, 0x1c, 0x18, 0x5b, 0x34, 0xc0, 0xa7, 0xc5, 0xd8, 0x07, 0x50, 0x29,
		0x1f, 0x00, 0xf8, 0xb4, 0x58, 0x22, 0xd1, 0xf8, 0xa3, 0x62, 0x69, 0x3b, 0x7c, 0x4e, 0x8c, 0xcf,
		0x89, 0x95, 0x0c, 0x2c, 0x18, 0xc0, 0x80, 0x40, 0x43, 0x03, 0x2e, 0x6b, 0xc0, 0x9d, 0x8c, 0xa7,
		0x4e, 0xe4, 0xdd, 0xbf, 0xfa, 0xdd, 0x08, 0x0f, 0x8d, 0x6d, 0x6a, 0x9c, 0xd3, 0xa3, 0xf4, 0x43,
		0x97, 0x1a, 0xc2, 0xda, 0xa0, 0xac, 0x0d, 0xd2, 0x5a, 0xa0, 0x8d, 0x83, 0x38, 0x12, 0xea, 0x78,
		0x3f, 0xbb, 0x66, 0xbf, 0x3b, 0x91, 0x1f, 0x9e, 0x7a, 0xba, 0x48, 0x12, 0x90, 0xf0, 0xce, 0xf3,
		0x52, 0x9c, 0xea, 0xb4, 0xce, 0x76, 0x7a, 0xf1, 0xc7, 0x64, 0xea, 0x7a, 0x43, 0x3a, 0xbd, 0xe4,
		0x0d, 0x59, 0x0d, 0xb1, 0x1a, 0x62, 0x35, 0x54, 0x2d, 0x35, 0x74, 0x44, 0x59, 0xba, 0x08, 0x9e,
		0x43, 0x16, 0x4d, 0x29, 0x50, 0xee, 0xcc, 0x77, 0xcc, 0x77, 0xcc, 0x77, 0xd5, 0xe2, 0xbb, 0x91,
		0x70, 0x1e, 0x70, 0x2f, 0x7a, 0x5c, 0x23, 0xbc, 0x8f, 0x04, 0x6d, 0x5d, 0xa7, 0xa1, 0xf7, 0xb7,
		0x6f, 0xcf, 0xd7, 0xff, 0x17, 0x07, 0xdd, 0x6f, 0x7d, 0x67, 0x2c, 0xfe, 0x70, 0xe3, 0x20, 0x10,
		0x7e, 0xf4, 0xcb, 0xaf, 0xb3, 0x9b, 0xa7, 0xf1, 0xfd, 0xc8, 0x0b, 0x9f, 0x44, 0x70, 0x97, 0xcf,
		0x01, 0x9e, 0xc7, 0xaa, 0x0f, 0x90, 0x9c, 0xb3, 0x11, 0xd1, 0xf1, 0xf3, 0x6b, 0x93, 0x4c, 0xd1,
		0x4c, 0xd1, 0x4c, 0xd1, 0x4c, 0xd1, 0xda, 0x28, 0xfa, 0x60, 0x69, 0x17, 0x18, 0xe9, 0xdf, 0xb9,
		0xbc, 0xa0, 0x0c, 0x00, 0x26, 0x60, 0x26, 0x60, 0x26, 0x60, 0x26, 0x60, 0x72, 0x1b, 0x39, 0x97,
		0xe9, 0x96, 0xbb, 0x3e, 0x58, 0xf2, 0x8e, 0x28, 0x84, 0x22, 0x13, 0x08, 0x82, 0xe0, 0x04, 0x13,
		0x35, 0x13, 0x35, 0x13, 0x35, 0x31, 0x51, 0x7b, 0x43, 0xe1, 0x47, 0x5e, 0xf4, 0x4c, 0x4c, 0xd6,
		0x14, 0xc1, 0xaf, 0x66, 0xda, 0xb5, 0x4b, 0x27, 0x14, 0xf4, 0x65, 0xdb, 0xae, 0xcc, 0xbe, 0xd9,
		0xea, 0x7e, 0x1d, 0xb4, 0xad, 0xf6, 0xa5, 0x65, 0xcf, 0xdf, 0xd9, 0x4d, 0x25, 0xd0, 0xdf, 0x9d,
		0x51, 0x3c, 0x4f, 0x95, 0xbe, 0xad, 0xfa, 0xab, 0xfe, 0x6d, 0xab, 0x65, 0x99, 0x3d, 0x6b, 0x70,
		0x79, 0xd3, 0x69, 0xb4, 0x2c, 0xc2, 0x22, 0x60, 0x6f, 0xaa, 0x3e, 0xf2, 0x2f, 0x96, 0xd9, 0xbf,
		0xb1, 0x4f, 0x71, 0xe4, 0xed, 0x6e, 0xe3, 0x86, 0x74, 0xc4, 0x24, 0x2d, 0xdd, 0xed, 0x9b, 0x99,
		0x0f, 0xab, 0xb4, 0x0b, 0x38, 0x12, 0xce, 0x85, 0x5d, 0x4a, 0x5b, 0xaa, 0x2a, 0x15, 0x76, 0xd9,
		0xb1, 0x47, 0x49, 0x13, 0xd3, 0xcf, 0x51, 0x69, 0xb8, 0x35, 0x92, 0x73, 0x79, 0x76, 0xd2, 0xb3,
		0xcb, 0xa4, 0xa3, 0xab, 0x97, 0x83, 0x76, 0xd2, 0xcf, 0xf4, 0x27, 0x97, 0x7a, 0x29, 0x57, 0x3c,
		0xf6, 0x52, 0xf7, 0x45, 0x46, 0x1e, 0xf8, 0xb5, 0xbe, 0x25, 0x6c, 0x7f, 0xf9, 0x58, 0x08, 0xed,
		0x76, 0x95, 0x8b, 0xbf, 0x48, 0xed, 0x24, 0xb9, 0xf8, 0x0b, 0x23, 0x9c, 0x11, 0x5e, 0x5d, 0x84,
		0x73, 0xf1, 0x17, 0x2e, 0xfe, 0x42, 0x33, 0xa9, 0xfb, 0x2c, 0xfe, 0xb2, 0xdd, 0x00, 0x2e, 0xb5,
		0x18, 0xcc, 0x36, 0x83, 0xf7, 0x74, 0x4b, 0xc3, 0xa8, 0x95, 0x93, 0xd0, 0xb1, 0x12, 0x3a, 0x2a,
		0xc5, 0x48, 0xc5, 0xd8, 0x54, 0x62, 0x68, 0x5c, 0x29, 0x86, 0x56, 0xa5, 0x1f, 0x44, 0xa5, 0x18,
		0xb5, 0x18, 0x8e, 0x4a, 0x8c, 0x06, 0x16, 0x83, 0xc9, 0x3a, 0xd6, 0xb5, 0xbf, 0x9a, 0x9d, 0xe6,
		0xbf, 0xcc, 0x7e, 0xb3, 0xdb, 0x51, 0x89, 0xb0, 0x40, 0x22, 0x28, 0x40, 0xcb, 0xbc, 0xd9, 0x69,
		0xdc, 0xf4, 0xfa, 0xf6, 0x0f, 0x43, 0xc7, 0xc6, 0x01, 0xd8, 0xa7, 0x5e, 0xdf, 0xec, 0x34, 0x4c,
		0xbb, 0xd1, 0xab, 0x52, 0xa7, 0xae, 0xba, 0xed, 0xb6, 0x65, 0x5f, 0x35, 0xcd, 0x56, 0x95, 0x7a,
		0xd5, 0xec, 0x34, 0x9a, 0xdf, 0x9b, 0x8d, 0x1b, 0xa5, 0x5e, 0x9d, 0xd1, 0x04, 0x24, 0x5e, 0xa0,
		0x0a, 0xe1, 0x4c, 0x61, 0xae, 0x24, 0x6a, 0xb9, 0xcb, 0x99, 0x94, 0xf2, 0x26, 0x24, 0xca, 0x64,
		0x94, 0x33, 0x11, 0x8b, 0x06, 0x2b, 0x69, 0x59, 0x50, 0x58, 0x14, 0x5b, 0xa8, 0x08, 0x6d, 0x39,
		0x6c, 0x96, 0xc5, 0xf5, 0x75, 0x5f, 0xfd, 0x24, 0x37, 0x29, 0xbb, 0x26, 0x03, 0x38, 0x09, 0x1b,
		0xc6, 0x0d, 0x19, 0xef, 0xea, 0x10, 0x5f, 0x07, 0x92, 0xfc, 0x96, 0x0e, 0xa5, 0x68, 0x08, 0x86,
		0x17, 0x7e, 0x71, 0xfe, 0x2d, 0xec, 0xc9, 0x64, 0xa1, 0x8d, 0x93, 0xa7, 0xce, 0x5e, 0xfe, 0x02,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x71, 0x48, 0x0b, 0xe3, 0x5f, 0x01,
		0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/organizations/organization/implementations/implementation/status": {
		reflect.TypeOf((E_OpenconfigCatalogTypes_IMPLEMENTATION_STATUS_TYPE)(0)),
	},
	"/organizations/organization/modules/module/classification/category": {
		reflect.TypeOf((E_OpenconfigCatalogTypes_MODULE_CATEGORY_BASE)(0)),
	},
	"/organizations/organization/modules/module/classification/deployment-status": {
		reflect.TypeOf((E_OpenconfigCatalogTypes_MODULE_STATUS_TYPE)(0)),
	},
	"/organizations/organization/modules/module/classification/subcategory": {
		reflect.TypeOf((E_OpenconfigCatalogTypes_MODULE_SUBCATEGORY_BASE)(0)),
	},
	"/organizations/organization/release-bundles/release-bundle/members/member/type": {
		reflect.TypeOf((E_OpenconfigCatalogTypes_CATALOG_MEMBER_TYPE)(0)),
	},
	"/organizations/organization/type": {
		reflect.TypeOf((E_OpenconfigCatalogTypes_ORGANIZATION_TYPE)(0)),
	},
}
