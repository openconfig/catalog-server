// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"html/template"
	"log"
	"net/http"
	"os"

	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/openconfig/catalog-server/graph"
	"github.com/openconfig/catalog-server/graph/generated"
	"github.com/openconfig/catalog-server/pkg/db"
)

const (
	// default port of launched catalog server
	defaultPort = "8080"
	// updateHTMLPath is the path to the update.html file.
	updateHTMLPath = "frontend/static/update.html"
)

// Main function is automatically generated by *gqlgen*, except ConnectDB() to connect to database.
func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}

	// Establish connection with database, other codes are automatically generated.
	err := db.ConnectDB()
	if err != nil {
		log.Fatal(err)
	}

	srv := handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{Resolvers: &graph.Resolver{}}))

	// Launch built-in graphQL frontend server.
	http.Handle("/playground", playground.Handler("GraphQL playground", "/query"))
	// Set handler for all queries.
	http.Handle("/query", srv)

	// static file server to serve frontend webpages.
	updateHTMLTemplate, err := os.ReadFile(updateHTMLPath)
	if err != nil {
		log.Fatal(err)
	}
	projectID, ok := os.LookupEnv("PROJECT_ID")
	if !ok {
		log.Fatal("$PROJECT_ID not set.")
	}
	t, err := template.New("update.html").Parse(string(updateHTMLTemplate))
	var updateHTMLData bytes.Buffer
	if err := t.Execute(&updateHTMLData,
		struct {
			ProjectID string
		}{
			ProjectID: projectID,
		}); err != nil {
		log.Fatalf("Cannot re-write update.html: %v", err)
	}
	os.WriteFile(updateHTMLPath, updateHTMLData.Bytes(), 0640)

	fileServer := http.FileServer(http.Dir("frontend"))
	http.HandleFunc(
		"/static/",
		func(w http.ResponseWriter, r *http.Request) {
			fileServer.ServeHTTP(w, r)
		},
	)
	http.HandleFunc(
		"/",
		func(w http.ResponseWriter, r *http.Request) {
			http.ServeFile(w, r, "index.html")
		},
	)

	log.Printf("connect to http://localhost:%s/ for GraphQL playground", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
